using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Configuration;
using System.Threading.Tasks;
using Microsoft.Data.SqlClient;

namespace Grocery_Project_Backend.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    
    public class GroceryController : ControllerBase
    {   
        // default nullable referencec
        private readonly string? _connectionString;
        // dependency injection

        public GroceryController(IConfiguration configuration) {
            _connectionString = configuration?.GetConnectionString("DefaultConnection");
        }

        [HttpGet]
        public async Task<IActionResult> GetAllData()
        {
            try
            {
                List<Dictionary<string, string>> results = new List<Dictionary<string, string>>();

                using (SqlConnection connection = new SqlConnection(_connectionString))
                {
                    // Open the connection
                    await connection.OpenAsync();

                    // SQL command to select all data from the GroceryAuth table
                    string sql = "SELECT * FROM GroceryAuth";

                    using (SqlCommand command = new SqlCommand(sql, connection))
                    {
                        // Execute the command and get the data reader
                        using (SqlDataReader reader = await command.ExecuteReaderAsync())
                        {
                            // Loop through the result set and add each row to the list
                            while (await reader.ReadAsync())
                            {
                                Dictionary<string, string> row = new Dictionary<string, string>();

                                row.Add("g_email", reader.GetString(0)); // Assuming g_email is the first column
                                row.Add("g_username", reader.GetString(1)); // Assuming g_username is the second column
                                row.Add("g_password", reader.GetString(2)); // Assuming g_password is the third column

                                results.Add(row);
                            }
                        }
                    }
                }

                return Ok(results);
            }
            catch (Exception ex)
            {
                // Handle exceptions
                return StatusCode(500, $"Internal Server Error: {ex.Message}");
            }
        }

        [HttpPost]
        public async Task<IActionResult> ValidateAuth()
        {
            return Ok();
        }
    }


}
